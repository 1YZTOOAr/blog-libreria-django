name: Smoke Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  smoke-production:
    name: Smoke (Production URL)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      SMOKE_BASE_URL: ${{ secrets.SMOKE_BASE_URL }}
      HAS_SMOKE: ${{ secrets.SMOKE_BASE_URL != '' }}
    steps:
      - name: Hit endpoints with retries
        if: ${{ env.HAS_SMOKE == 'true' }}
        run: |
          set -e
          echo "Base: $SMOKE_BASE_URL"
          FAIL=0
          # Obligatorios y opcionales
          mandatory=("/" "/db-healthz/")
          optional=("/healthz")

          curl_code() {
            local url="$1"
            local code
            # -L sigue redirecciones; tiempos para evitar bloqueos largos
            code=$(curl -sSL --connect-timeout 5 --max-time 12 -o /dev/null -w "%{http_code}" "$url" 2>curl.err || echo "000")
            if [ "$code" = "000" ]; then
              echo "curl error -> $(cat curl.err | tail -n 1)" >&2 || true
            fi
            rm -f curl.err || true
            echo "$code"
          }

          check_paths() {
            local label="$1"; shift
            local mode="$1"; shift  # "mandatory" o "optional"
            for path in "$@"; do
              echo "Probing $label$path ($mode)"
              ok=0
              for i in {1..12}; do
                code=$(curl_code "$SMOKE_BASE_URL$path")
                if [ "$code" = "200" ]; then
                  echo "OK $path (200)"
                  curl -s "$SMOKE_BASE_URL$path" | head -c 300 || true
                  ok=1
                  break
                fi
                echo "Attempt $i: $code -> retrying..."
                sleep 5
              done
              if [ "$ok" = "0" ] && [ "$mode" = "mandatory" ]; then
                echo "Endpoint $path did not return 200 after retries (mandatory)" >&2
                FAIL=1
              fi
              if [ "$ok" = "0" ] && [ "$mode" = "optional" ]; then
                echo "Warning: optional endpoint $path did not return 200" >&2
              fi
            done
          }

          check_paths "$SMOKE_BASE_URL" mandatory "${mandatory[@]}"
          check_paths "$SMOKE_BASE_URL" optional  "${optional[@]}"

          # Verificar CSS enlazado en la home (best-effort)
          echo "Checking linked CSS from /"
          html=$(curl -sSL --connect-timeout 5 --max-time 12 "$SMOKE_BASE_URL/")
          css=$(echo "$html" | grep -oE 'href="/[^"]+\.css"' | head -n1 | sed -E 's/^href="(.*)"$/\1/')
          if [ -n "$css" ]; then
            code=$(curl_code "$SMOKE_BASE_URL$css")
            if [ "$code" = "200" ]; then
              echo "OK CSS $css (200)"
            else
              echo "Warning: CSS $css responded $code" >&2
            fi
          else
            echo "Warning: no CSS link found on homepage" >&2
          fi

          if [ "$FAIL" = "1" ]; then
            echo "One or more mandatory endpoints failed" >&2
            exit 1
          fi
      - name: Skip production smoke (no SMOKE_BASE_URL)
        if: ${{ env.HAS_SMOKE != 'true' }}
        run: echo "SMOKE_BASE_URL not set; skipping production smoke."

  smoke-preview-vercel:
    name: Smoke (Vercel Preview)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
      HAS_VERCEL: ${{ secrets.VERCEL_TOKEN != '' && secrets.VERCEL_PROJECT_ID != '' }}
    steps:
      - name: Install jq
        if: ${{ env.HAS_VERCEL == 'true' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      - name: Resolve preview URL from Vercel API
        if: ${{ env.HAS_VERCEL == 'true' }}
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: |
          set -euo pipefail
          TEAM_QS=""
          if [ -n "${VERCEL_TEAM_ID:-}" ]; then
            TEAM_QS="&teamId=${VERCEL_TEAM_ID}"
          fi
          primary="https://api.vercel.com/v6/deployments?projectId=${VERCEL_PROJECT_ID}${TEAM_QS}&meta-githubCommitSha=${GITHUB_SHA}&state=READY&limit=1"
          echo "Querying: $primary"
          resp=$(curl -sS -H "Authorization: Bearer ${VERCEL_TOKEN}" "$primary")
          url=$(echo "$resp" | jq -r '.deployments[0].url // empty')
          if [ -z "$url" ]; then
            echo "No deployment for this SHA yet, fallback to last READY"
            fallback="https://api.vercel.com/v6/deployments?projectId=${VERCEL_PROJECT_ID}${TEAM_QS}&state=READY&limit=1"
            resp=$(curl -sS -H "Authorization: Bearer ${VERCEL_TOKEN}" "$fallback")
            url=$(echo "$resp" | jq -r '.deployments[0].url // empty')
          fi
          if [ -z "$url" ]; then
            echo "Could not resolve a preview URL" >&2
            exit 1
          fi
          echo "PREVIEW_BASE=https://$url" >> $GITHUB_ENV
          echo "Resolved preview: https://$url"
      - name: Hit endpoints with retries
        if: ${{ env.HAS_VERCEL == 'true' }}
        run: |
          set -e
          echo "Base: $PREVIEW_BASE"
          FAIL=0
          mandatory=("/" "/db-healthz/")
          optional=("/healthz")

          curl_code() {
            local url="$1"
            local code
            code=$(curl -sSL --connect-timeout 5 --max-time 5 -o /dev/null -w "%{http_code}" "$url" 2>curl.err || echo "000")
            if [ "$code" = "000" ]; then
              echo "curl error -> $(cat curl.err | tail -n 1)" >&2 || true
            fi
            rm -f curl.err || true
            echo "$code"
          }

          check_paths() {
            local label="$1"; shift
            local mode="$1"; shift
            for path in "$@"; do
              echo "Probing $label$path ($mode)"
              ok=0
              for i in {1..20}; do
                code=$(curl_code "$label$path")
                if [ "$code" = "200" ]; then
                  echo "OK $path (200)"
                  curl -s "$label$path" | head -c 300 || true
                  ok=1
                  break
                fi
                echo "Attempt $i: $code -> retrying..."
                sleep 8
              done
              if [ "$ok" = "0" ] && [ "$mode" = "mandatory" ]; then
                echo "Endpoint $path did not return 200 after retries (mandatory)" >&2
                FAIL=1
              fi
              if [ "$ok" = "0" ] && [ "$mode" = "optional" ]; then
                echo "Warning: optional endpoint $path did not return 200" >&2
              fi
            done
          }

          check_paths "$PREVIEW_BASE" mandatory "${mandatory[@]}"
          check_paths "$PREVIEW_BASE" optional  "${optional[@]}"

          # Verificar CSS enlazado en la home (best-effort)
          echo "Checking linked CSS from /"
          html=$(curl -sSL --connect-timeout 5 --max-time 12 "$PREVIEW_BASE/")
          css=$(echo "$html" | grep -oE 'href="/[^"]+\.css"' | head -n1 | sed -E 's/^href="(.*)"$/\1/')
          if [ -n "$css" ]; then
            code=$(curl_code "$PREVIEW_BASE$css")
            if [ "$code" = "200" ]; then
              echo "OK CSS $css (200)"
            else
              echo "Warning: CSS $css responded $code" >&2
            fi
          else
            echo "Warning: no CSS link found on homepage" >&2
          fi

          if [ "$FAIL" = "1" ]; then
            echo "One or more mandatory endpoints failed" >&2
            exit 1
          fi
      - name: Skip preview smoke (missing Vercel secrets)
        if: ${{ env.HAS_VERCEL != 'true' }}
        run: echo "VERCEL_TOKEN/VERCEL_PROJECT_ID not set; skipping preview smoke."
