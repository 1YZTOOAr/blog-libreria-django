name: Smoke Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  smoke-production:
    name: Smoke (Production URL)
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && secrets.SMOKE_BASE_URL != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Hit endpoints with retries
        env:
          BASE: ${{ secrets.SMOKE_BASE_URL }}
        run: |
          set -e
          echo "Base: $BASE"
          FAIL=0
          # Obligatorios y opcionales
          mandatory=("/" "/db-healthz/")
          optional=("/healthz" "/api/healthz")

          check_paths() {
            local label="$1"; shift
            local mode="$1"; shift  # "mandatory" o "optional"
            for path in "$@"; do
              echo "Probing $label$path ($mode)"
              ok=0
              for i in {1..10}; do
                code=$(curl -s -o /dev/null -w "%{http_code}" "$label$path" || true)
                if [ "$code" = "200" ]; then
                  echo "OK $path (200)"
                  curl -s "$label$path" | head -c 300 || true
                  ok=1
                  break
                fi
                echo "Attempt $i: $code -> retrying..."
                sleep 6
              done
              if [ "$ok" = "0" ] && [ "$mode" = "mandatory" ]; then
                echo "Endpoint $path did not return 200 after retries (mandatory)" >&2
                FAIL=1
              fi
              if [ "$ok" = "0" ] && [ "$mode" = "optional" ]; then
                echo "Warning: optional endpoint $path did not return 200" >&2
              fi
            done
          }

          check_paths "$BASE" mandatory "${mandatory[@]}"
          check_paths "$BASE" optional  "${optional[@]}"

          if [ "$FAIL" = "1" ]; then
            echo "One or more mandatory endpoints failed" >&2
            exit 1
          fi

  smoke-preview-vercel:
    name: Smoke (Vercel Preview)
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      - name: Resolve preview URL from Vercel API
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          set -euo pipefail
          TEAM_QS=""
          if [ -n "${VERCEL_TEAM_ID:-}" ]; then
            TEAM_QS="&teamId=${VERCEL_TEAM_ID}"
          fi
          primary="https://api.vercel.com/v6/deployments?projectId=${VERCEL_PROJECT_ID}${TEAM_QS}&meta-githubCommitSha=${GITHUB_SHA}&state=READY&limit=1"
          echo "Querying: $primary"
          resp=$(curl -sS -H "Authorization: Bearer ${VERCEL_TOKEN}" "$primary")
          url=$(echo "$resp" | jq -r '.deployments[0].url // empty')
          if [ -z "$url" ]; then
            echo "No deployment for this SHA yet, fallback to last READY"
            fallback="https://api.vercel.com/v6/deployments?projectId=${VERCEL_PROJECT_ID}${TEAM_QS}&state=READY&limit=1"
            resp=$(curl -sS -H "Authorization: Bearer ${VERCEL_TOKEN}" "$fallback")
            url=$(echo "$resp" | jq -r '.deployments[0].url // empty')
          fi
          if [ -z "$url" ]; then
            echo "Could not resolve a preview URL" >&2
            exit 1
          fi
          echo "PREVIEW_BASE=https://$url" >> $GITHUB_ENV
          echo "Resolved preview: https://$url"
      - name: Hit endpoints with retries
        run: |
          set -e
          echo "Base: $PREVIEW_BASE"
          FAIL=0
          mandatory=("/" "/db-healthz/")
          optional=("/healthz" "/api/healthz")

          check_paths() {
            local label="$1"; shift
            local mode="$1"; shift
            for path in "$@"; do
              echo "Probing $label$path ($mode)"
              ok=0
              for i in {1..20}; do
                code=$(curl -s -o /dev/null -w "%{http_code}" "$label$path" || true)
                if [ "$code" = "200" ]; then
                  echo "OK $path (200)"
                  curl -s "$label$path" | head -c 300 || true
                  ok=1
                  break
                fi
                echo "Attempt $i: $code -> retrying..."
                sleep 9
              done
              if [ "$ok" = "0" ] && [ "$mode" = "mandatory" ]; then
                echo "Endpoint $path did not return 200 after retries (mandatory)" >&2
                FAIL=1
              fi
              if [ "$ok" = "0" ] && [ "$mode" = "optional" ]; then
                echo "Warning: optional endpoint $path did not return 200" >&2
              fi
            done
          }

          check_paths "$PREVIEW_BASE" mandatory "${mandatory[@]}"
          check_paths "$PREVIEW_BASE" optional  "${optional[@]}"

          if [ "$FAIL" = "1" ]; then
            echo "One or more mandatory endpoints failed" >&2
            exit 1
          fi
