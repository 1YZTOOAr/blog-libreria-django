"""
Django settings for blog project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import sys

#librerias externas
import os
import dj_database_url
from urllib.parse import urlparse, parse_qsl, urlencode, urlunparse
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Carga .env desde la raíz del repo o desde BASE_DIR
load_dotenv(BASE_DIR / ".env")  # si .env está en la raíz del repo

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'sdfgasdgwzw$z@3*jsf4rv&-*^9z7-m(n8$7q5ihxt*b)z1r%5^ww3^&ob'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

# ALLOWED_HOSTS = []

# --- Seguridad ---
# SECRET_KEY: usa una segura en producción (en Vercel como variable de entorno).
SECRET_KEY = os.getenv('SECRET_KEY', 'sdfgasdgwzw$z@3*jsf4rv&-*^9z7-m(n8$7q5ihxt*b)z1r%5^ww3^&ob')

# DEBUG controlará el comportamiento de estáticos/manifest de WhiteNoise, plantillas, etc.
# En producción: define DEBUG=False en Vercel (Settings → Environment Variables).
DEBUG = os.getenv('DEBUG', 'True') == 'True'

# Hosts por defecto seguros para local + Vercel (comodín .vercel.app cubre previews)
DEFAULT_HOSTS = ["127.0.0.1", "localhost", ".vercel.app", "blog-libreria-django.vercel.app"]

# ALLOWED_HOSTS: puedes sobreescribir por env si quieres admitir más dominios.
ALLOWED_HOSTS = ["127.0.0.1", ".vercel.app"]

# CSRF_TRUSTED_ORIGINS: ajusta si atiendes desde un dominio propio/https.
CSRF_TRUSTED_ORIGINS = ["http://localhost:8000", "http://127.0.0.1:8000"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # WhiteNoise integra el servidor de estáticos. Con runserver_nostatic
    # evitamos que el staticfiles de Django interfiera en dev.
    'whitenoise.runserver_nostatic',   # opcional en dev, no molesta en prod
    'posts'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # WhiteNoise debe ir lo antes posible tras SecurityMiddleware.
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI para runserver/local y compatibilidad general
WSGI_APPLICATION = 'blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# --- Base de datos: PostgreSQL (Neon) ---
# Parseamos DATABASE_URL con saneado de parámetros problemáticos (channel_binding)
# y forzamos sslmode=require para compatibilidad en runtimes serverless.

def _sanitize_db_url(u: str) -> str:
    """Elimina parámetros problemáticos (p.ej., channel_binding) y asegura sslmode=require.

    Algunos entornos (como las funciones de Vercel) pueden traer libpq sin soporte
    para channel binding. En ese caso, un `channel_binding=require` en el DSN puede
    provocar errores de conexión (500) al hacer queries.
    """
    try:
        p = urlparse(u)
        qs = dict(parse_qsl(p.query, keep_blank_values=True))
        qs.pop("channel_binding", None)  # quitar si viene en la URL
        # Asegura sslmode=require salvo que ya esté indicado explícitamente
        qs.setdefault("sslmode", "require")
        new_q = urlencode(qs)
        return urlunparse(p._replace(query=new_q))
    except Exception:
        return u  # fallback conservador


db_url = os.getenv("DATABASE_URL")
if db_url:
    safe_url = _sanitize_db_url(db_url)
    DATABASES = {
        "default": dj_database_url.parse(
            safe_url,
            conn_max_age=600,
            ssl_require=True,
        )
    }
else:
    # Fallback local si te quedas sin DATABASE_URL
    # En Vercel, el FS es de solo lectura salvo /tmp
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": "/tmp/db.sqlite3",  # ruta temporal segura en Vercel
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es-es'

TIME_ZONE = 'Europe/Madrid'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

#STATIC_URL = 'static/'
# --- Archivos estáticos ---

# Archivos estáticos (CSS, JS, imágenes)
STATIC_URL = '/static/'

# En producción (Vercel) `collectstatic` escribe aquí.
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Almacenamiento con fingerprint (manifest) + compresión gzip/brotli.
# Django 5 recomienda configurar mediante STORAGES (STATICFILES_STORAGE puede ser ignorado).
# Importante: `{% static %}` resolverá a URLs con hash cuando haya manifest (tras collectstatic).
STORAGES = {
    # Almacenamiento por defecto de ficheros subidos (no usado en este prototipo)
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    # Almacenamiento de estáticos (usado por collectstatic y {% static %})
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Compatibilidad retro (no debería ser necesario en Django 5+, pero no estorba):
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Tests: por defecto SQLite; Postgres opcional con variable de entorno ---
# Algunos proveedores gestionados (como Neon) pueden mantener sesiones abiertas
# que impiden el DROP DATABASE del entorno de test. Para que los tests sean
# rápidos y deterministas, usamos SQLite por defecto.
# Si necesitas probar contra Postgres en CI, exporta USE_POSTGRES_FOR_TESTS=1
# y proporciona DATABASE_URL apuntando a una base o rama de Neon específica
# para tests.
IS_TESTING = any(arg in sys.argv for arg in ["test", "pytest"])  # soporte pytest/django test
USE_PG_FOR_TESTS = os.getenv("USE_POSTGRES_FOR_TESTS", "").lower() in {"1", "true", "yes", "on"}
if IS_TESTING and not USE_PG_FOR_TESTS:
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "test.sqlite3",  # archivo local para tests
    }

# En entorno de tests, evita depender del manifest de estáticos para no requerir collectstatic.
if IS_TESTING:
    try:
        # Ajuste del backend de estáticos durante tests
        STORAGES["staticfiles"]["BACKEND"] = "django.contrib.staticfiles.storage.StaticFilesStorage"  # type: ignore[index]
    except Exception:
        pass
    STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"
